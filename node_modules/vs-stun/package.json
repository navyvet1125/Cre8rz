{
  "_args": [
    [
      {
        "raw": "vs-stun@~0.0.7",
        "scope": null,
        "escapedName": "vs-stun",
        "name": "vs-stun",
        "rawSpec": "~0.0.7",
        "spec": ">=0.0.7 <0.1.0",
        "type": "range"
      },
      "/home/evan/Coding/Cre8rz/node_modules/Haraka"
    ]
  ],
  "_from": "vs-stun@>=0.0.7 <0.1.0",
  "_id": "vs-stun@0.0.7",
  "_inCache": true,
  "_location": "/vs-stun",
  "_npmUser": {
    "name": "d_vova",
    "email": "vladimir.darmin@gmail.com"
  },
  "_npmVersion": "1.2.18",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vs-stun@~0.0.7",
    "scope": null,
    "escapedName": "vs-stun",
    "name": "vs-stun",
    "rawSpec": "~0.0.7",
    "spec": ">=0.0.7 <0.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "/Haraka"
  ],
  "_resolved": "http://registry.npmjs.org/vs-stun/-/vs-stun-0.0.7.tgz",
  "_shasum": "3c71c6a7f3ecf743ac1f6f9beb96b2626cc3bd80",
  "_shrinkwrap": null,
  "_spec": "vs-stun@~0.0.7",
  "_where": "/home/evan/Coding/Cre8rz/node_modules/Haraka",
  "author": {
    "name": "Vladimir Darmin"
  },
  "bugs": {
    "url": "https://github.com/d-vova/vs-stun/issues"
  },
  "dependencies": {},
  "description": "STUN protocol implementation for NodeJS",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "3c71c6a7f3ecf743ac1f6f9beb96b2626cc3bd80",
    "tarball": "https://registry.npmjs.org/vs-stun/-/vs-stun-0.0.7.tgz"
  },
  "gitHead": "406299d3d0b8f545626b358b0d6848a60f68f26d",
  "homepage": "https://github.com/d-vova/vs-stun#readme",
  "keywords": [
    "stun",
    "nat"
  ],
  "license": "MIT",
  "main": "vs-stun.js",
  "maintainers": [
    {
      "name": "d_vova",
      "email": "vladimir.darmin@gmail.com"
    }
  ],
  "name": "vs-stun",
  "optionalDependencies": {},
  "readme": "vs-stun\n=======\n\nSTUN protocol implementation in NodeJS\n\n\nInstallation\n------------\n\n```\nnpm install vs-stun\n```\n\n\nQuick Start\n-----------\n\nCreate a datagram socket, discover its host, port, and topology:\n\n```javascript\nvar stun = require('vs-stun');\n\nvar socket, server = { host: 'stun.l.google.com', port: 19302 }\n\nvar callback = function callback ( error, value ) {\n  if ( !error ) {\n    socket = value;\n\n    console.log(socket.stun);\n\n    socket.close();\n  }\n  else console.log('Something went wrong: ' + error);\n}\n\nstun.connect(server, callback);\n```\n\nOr discover host, port, and topology of an existing socket:\n\n```javascript\nvar stun = require('vs-stun');\n\n// socket is created and opened here...\n\nvar server = { host: 'stun.l.google.com', port: 19302 }\n\nvar callback = function callback ( error, value ) {\n  if ( !error ) {\n    console.log(value);\n\n    socket.close();\n  }\n  else console.log('Something went wrong: ' + error);\n}\n\nstun.resolve(socket, server, callback);\n```\n\n\nCreate Packet\n-------------\n\n```javascript\nvar packet = stun.create({ username: 'name', password: 'pswd' });\n```\n\n\n##### Binding Request #####\n\n```javascript\nvar packet = stun.create.bindingRequest({ username: 'name', password: 'pswd' });\n```\n\n##### Binding Response #####\n\n```javascript\nvar packet = stun.create.bindingSuccess({ username: 'name', password: 'pswd' });\n```\n\n##### Binding Error #####\n\n```javascript\nvar packet = stun.create.bindingFailure({ username: 'name', password: 'pswd' });\n```\n\n##### Shared Secret Request #####\n\n```javascript\nvar packet = stun.create.sharedSecretRequest({ username: 'name', password: 'pswd' });\n```\n\n##### Shared Secret Response #####\n\n```javascript\nvar packet = stun.create.sharedSecretSuccess({ username: 'name', password: 'pswd' });\n```\n\n##### Shared Secret Error #####\n\n```javascript\nvar packet = stun.create.sharedSecretFailure({ username: 'name', password: 'pswd' });\n```\n\n\nAppend Attributes\n-----------------\n\n### RFC 3489 (STUN) ###\n\n##### Response-Address #####\n\n```javascript\nvar error, address = { host: '192.168.0.1', port: 8080, family: 'IPv4' }\n\nif ( error = packet.append.responseAddress(address) ) console.log(error);\n```\n\n##### Changed-Address #####\n\n```javascript\nvar error, address = { host: '192.168.0.1', port: 8080, family: 'IPv4' }\n\nif ( error = packet.append.changedAddress(address) ) console.log(error);\n```\n\n##### Source-Address #####\n\n```javascript\nvar error, address = { host: '192.168.0.1', port: 8080, family: 'IPv4' }\n\nif ( error = packet.append.sourceAddress(address) ) console.log(error);\n```\n\n##### Password #####\n\n```javascript\nvar error, password = \"secret\";\n\nif ( error = packet.append.password(password) ) console.log(error);\n```\n\n##### Reflected-From #####\n\n```javascript\nvar error, address = { host: '192.168.0.1', port: 8080, family: 'IPv4' }\n\nif ( error = packet.append.reflectedFrom(address) ) console.log(error);\n```\n\n\n### RFC 5245 (ICE) ###\n\n##### Priority #####\n\n```javascript\nvar error, level = 12345;\n\nif ( error = packet.append.priority(level) ) console.log(error);\n```\n\n##### Use-Candidate #####\n\n```javascript\nvar error = null;\n\nif ( error = packet.append.useCandidate() ) console.log(error);\n```\n\n##### Ice-Controlled #####\n\n```javascript\nvar error, tieBreaker = '08192a3b4c5e6d7f';\n\nif ( error = packet.append.iceControlled(tieBreaker) ) console.log(error);\n```\n\n##### Ice-Controlling #####\n\n```javascript\nvar error, tieBreaker = '08192a3b4c5e6d7f';\n\nif ( error = packet.append.iceControlling(tieBreaker) ) console.log(error);\n```\n\n\n### RFC 5389 (STUN) ###\n\n##### Mapped-Address #####\n\n```javascript\nvar error, address = { host: '192.168.0.1', port: 8080, family: 'IPv4' }\n\nif ( error = packet.append.mappedAddress(address) ) console.log(error);\n```\n\n##### XOR-Mapped-Address #####\n\n```javascript\nvar error, address = { host: '192.168.0.1', port: 8080, family: 'IPv4' }\n\nif ( error = packet.append.xorMappedAddress(address) ) console.log(error);\n```\n\n##### Username #####\n\n```javascript\nvar error, name = 'Joe';\n\nif ( error = packet.append.username(name) ) console.log(error);\n```\n\n##### Message-Integrity #####\n\n```javascript\nvar error = null;\n\nif ( error = packet.append.messageIntegrity() ) console.log(error);\n```\n\n##### Fingerprint #####\n\n```javascript\nvar error = null;\n\nif ( error = packet.append.fingerprint() ) console.log(error);\n```\n\n##### Error-Code #####\n\n```javascript\nvar error, errorCode = { code: 300, reason: 'Try Alternate' }\n\nif ( error = packet.append.errorCode(errorCode) ) console.log(error);\n```\n\n##### Realm #####\n\n```javascript\nvar error, name = 'realm';\n\nif ( error = packet.append.realm(name) ) console.log(error);\n```\n\n##### Nonce #####\n\n```javascript\nvar error, name = 'nonce';\n\nif ( error = packet.append.nonce(name) ) console.log(error);\n```\n\n##### Unknown-Attributes #####\n\n```javascript\nvar error, attributes = [ 0x02, 0x04, 0x05 ];\n\nif ( error = packet.append.unknownAttributes(attributes) ) console.log(error);\n```\n\n##### Software #####\n\n```javascript\nvar error, name = 'soft';\n\nif ( error = packet.append.software('soft') ) console.log(error);\n```\n\n##### Alternate-Server #####\n\n```javascript\nvar error, address = { host: '192.168.0.1', port: 8080, family: 'IPv4' }\n\nif ( error = packet.append.alternateServer(address) ) console.log(error);\n```\n\n\n### RFC 5780 (NAT) ###\n\n##### Change-Request #####\n\n```javascript\nvar error, flags = { host: true, port: true }\n\nif ( error = packet.append.changeRequest(flags) ) console.log(error);\n```\n\n##### Response-Origin #####\n\n```javascript\nvar error, address = { host: '192.168.0.1', port: 8080, family: 'IPv4' }\n\nif ( error = packet.append.responseOrigin(address) ) console.log(error);\n```\n\n##### Other-Address #####\n\n```javascript\nvar error, address = { host: '192.168.0.1', port: 8080, family: 'IPv4' }\n\nif ( error = packet.append.otherAddress(address) ) console.log(error);\n```\n\n##### Response-Port #####\n\n```javascript\nvar error, port = 8080;\n\nif ( error = packet.append.responsePort(port) ) console.log(error);\n```\n\n##### Padding #####\n\n```javascript\nvar error, padding = 'some string for padding....';\n\nif ( error = packet.append.padding(padding) ) console.log(error);\n```\n\n\nError Codes and Reasons\n-----------------------\n\n### RFC 5389 (STUN) ###\n\n  - `300` - Try Alternate\n  - `400` - Bad Request\n  - `401` - Unauthorized\n  - `420` - Unknown Attribute\n  - `438` - Stale Nonce\n  - `500` - Server Error\n\n\nLicense\n-------\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/d-vova/vs-stun.git"
  },
  "scripts": {
    "start": "node vs-stun.js",
    "test": "node vs-stun.js test"
  },
  "version": "0.0.7"
}
